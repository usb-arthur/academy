// <auto-generated />
using System;
using ACADEMY.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ACADEMY.WebApi.Migrations
{
    [DbContext(typeof(AcademyDbContext))]
    partial class AcademyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ACADEMY.Data.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Công nghệ thông tin",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 579, DateTimeKind.Local).AddTicks(9124),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(7477)
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Ngoại ngữ",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9271),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9293)
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Thiết kế",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9319),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9320)
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 1L,
                            CategoryName = "Cơ sở dữ liệu",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9683),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9687)
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 1L,
                            CategoryName = "Ngôn ngữ lập trình",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9703),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9705)
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = 1L,
                            CategoryName = "Lập trình web",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9706),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9707)
                        },
                        new
                        {
                            Id = 7L,
                            CategoryId = 2L,
                            CategoryName = "Tiếng Hoa",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9709),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9710)
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = 2L,
                            CategoryName = "Tiếng Anh",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9712),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9713)
                        },
                        new
                        {
                            Id = 9L,
                            CategoryId = 2L,
                            CategoryName = "Tiếng Nhật",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9714),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9715)
                        },
                        new
                        {
                            Id = 10L,
                            CategoryId = 3L,
                            CategoryName = "Phần mềm thiết kế",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9717),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9718)
                        },
                        new
                        {
                            Id = 11L,
                            CategoryId = 3L,
                            CategoryName = "Thiết kế đồ họa",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9720),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9721)
                        },
                        new
                        {
                            Id = 12L,
                            CategoryId = 3L,
                            CategoryName = "Thiết kế 3D",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9722),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 580, DateTimeKind.Local).AddTicks(9723)
                        });
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("BriefDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<double>("CourseFee")
                        .HasColumnType("float");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("DetailDescription")
                        .HasColumnType("ntext");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("NumOfView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double?>("Sale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime?>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BriefDescription = "Khóa học này sẽ giúp các lập trình viên nắm được nguyên tắc, cú pháp và cách thức hoạt động của SQL (Structured Query Language).",
                            CategoryId = 4L,
                            CourseFee = 500000.0,
                            CourseName = "Làm quen với SQL",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(2179),
                            DetailDescription = "Khóa học này sẽ giúp các lập trình viên nắm được nguyên tắc, cú pháp và cách thức hoạt động của SQL (Structured Query Language).",
                            IsDeleted = false,
                            NumOfView = 0,
                            SortOrder = 0,
                            Status = 0,
                            TeacherId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(2435)
                        },
                        new
                        {
                            Id = 2L,
                            BriefDescription = "Khóa học lập trình C cho người mới bắt đầu. Khóa học này sẽ cung cấp những kiến thức cơ bản và là nền tảng để bạn đi xa hơn trên con đường lập trình.",
                            CategoryId = 5L,
                            CourseFee = 499000.0,
                            CourseName = "C cho người mới bắt đầu",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3233),
                            DetailDescription = "Khóa học lập trình C cho người mới bắt đầu. Khóa học này sẽ cung cấp những kiến thức cơ bản và là nền tảng để bạn đi xa hơn trên con đường lập trình.",
                            IsDeleted = false,
                            NumOfView = 0,
                            SortOrder = 0,
                            Status = 0,
                            TeacherId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3244)
                        },
                        new
                        {
                            Id = 3L,
                            BriefDescription = "bắt đầu lập trình Web từ những vấn đề cơ bản nhất",
                            CategoryId = 6L,
                            CourseFee = 700000.0,
                            CourseName = "Nhập môn lập trình Web",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3359),
                            DetailDescription = "bắt đầu lập trình Web từ những vấn đề cơ bản nhất",
                            IsDeleted = false,
                            NumOfView = 0,
                            SortOrder = 0,
                            Status = 1,
                            TeacherId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3361)
                        },
                        new
                        {
                            Id = 4L,
                            BriefDescription = "Trọn bộ kỹ năng tiếng anh cơ bản. Giao tiếp tiếng Anh từ con số 0.",
                            CategoryId = 8L,
                            CourseFee = 499000.0,
                            CourseName = "Tiếng Anh cho người bắt đầu",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3363),
                            DetailDescription = "Trọn bộ kỹ năng tiếng anh cơ bản. Giao tiếp tiếng Anh từ con số 0.",
                            IsDeleted = false,
                            NumOfView = 0,
                            SortOrder = 0,
                            Status = 0,
                            TeacherId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3364)
                        },
                        new
                        {
                            Id = 5L,
                            BriefDescription = "Khóa học tiếng Trung dễ hiểu, lôi cuốn cho người mới bắt đầu, được thiết kế dựa trên giáo trình Boya Chinese của Đại học Văn hóa và Ngôn ngữ Bắc Kinh.",
                            CategoryId = 7L,
                            CourseFee = 599000.0,
                            CourseName = "Tiếng Trung cơ bản",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3366),
                            DetailDescription = "Khóa học tiếng Trung dễ hiểu, lôi cuốn cho người mới bắt đầu, được thiết kế dựa trên giáo trình Boya Chinese của Đại học Văn hóa và Ngôn ngữ Bắc Kinh.",
                            IsDeleted = false,
                            NumOfView = 0,
                            SortOrder = 0,
                            Status = 0,
                            TeacherId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3367)
                        },
                        new
                        {
                            Id = 6L,
                            BriefDescription = "Khóa học này sẽ giúp bạn làm quen với tiếng Nhật và có kiến thức nền tảng.",
                            CategoryId = 9L,
                            CourseFee = 666000.0,
                            CourseName = "Tiếng Nhật cơ bản cho người bắt đầu",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3372),
                            DetailDescription = "Khóa học này sẽ giúp bạn làm quen với tiếng Nhật và có kiến thức nền tảng.",
                            IsDeleted = false,
                            NumOfView = 0,
                            SortOrder = 0,
                            Status = 1,
                            TeacherId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3373)
                        },
                        new
                        {
                            Id = 7L,
                            BriefDescription = "Trở thành nhà thiết kế chuyên nghiệp với Photoshop",
                            CategoryId = 10L,
                            CourseFee = 299000.0,
                            CourseName = "Học Photoshop trọn bộ",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3375),
                            DetailDescription = "Trở thành nhà thiết kế chuyên nghiệp với Photoshop.",
                            IsDeleted = false,
                            NumOfView = 0,
                            SortOrder = 0,
                            Status = 0,
                            TeacherId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3376)
                        },
                        new
                        {
                            Id = 8L,
                            BriefDescription = "Học thiết kế đồ họa với Adobe CC trong khóa học mới này!",
                            CategoryId = 11L,
                            CourseFee = 499000.0,
                            CourseName = "Học thiết kế đồ họa trọn bộ",
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3378),
                            DetailDescription = "Học thiết kế đồ họa với Adobe CC trong khóa học mới này!",
                            IsDeleted = false,
                            NumOfView = 0,
                            SortOrder = 0,
                            Status = 1,
                            TeacherId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(3379)
                        });
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.CourseDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("Done")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDetail");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Tạm được",
                            CourseId = 1L,
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(7776),
                            Rate = 7,
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(8201)
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Khóa học rất tốt",
                            CourseId = 2L,
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(9241),
                            Rate = 9,
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(9255)
                        },
                        new
                        {
                            Id = 3L,
                            Content = "Khóa học rất bổ ích",
                            CourseId = 3L,
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(9281),
                            Rate = 8,
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(9282)
                        });
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad0e4e6a-fee6-4ccf-91eb-5f357e04e467"),
                            ConcurrencyStamp = "8eaed57d-a187-4413-af95-8c97d968fef7",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("09e89e3b-00dd-4580-a403-63fc3f91ab50"),
                            ConcurrencyStamp = "3c0cb6d6-6420-46a8-8923-08fe798ba001",
                            Name = "Teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("85baa706-7544-477e-ba32-004d478a7200"),
                            ConcurrencyStamp = "b33a61a6-e12a-4879-8c3e-bf8409cef1fb",
                            Name = "Student",
                            NormalizedName = "student"
                        });
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.StudentCourse", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourse");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CourseId = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CourseId = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CourseId = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CourseId = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CourseId = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eafef07d-95fb-473d-b38e-57ea4a29968d"),
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "",
                            Contact = "{'email': 'nhan.nguyenvo1@gmail.com'}",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1999, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nhan.nguyenvo1@gmail.com",
                            EmailConfirmed = true,
                            FirstLogin = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            Name = "Nguyễn Võ Nhân",
                            NormalizedEmail = "nhan.nguyenvo1@gmail.com",
                            NormalizedUserName = "nhan.nguyenvo1@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMV0U7dbn8Ro1AWAv7ZCquyc6tA+ULscI5byGedY5t9LGYci7sgc2ND6Nvh2UqIwUg==",
                            PhoneNumber = "0348310590",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "nhan.nguyenvo1@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "",
                            Contact = "email, message, phone",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1999, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NguyenVanHung@gmail.com",
                            EmailConfirmed = true,
                            FirstLogin = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            Name = "Nguyễn Văn Hùng",
                            NormalizedEmail = "NguyenVanHung@gmail.com",
                            NormalizedUserName = "Nguyễn Văn Hùng",
                            PasswordHash = "AQAAAAEAACcQAAAAEPYK0ERTGCMO9TK+xJIW/mNRmGfQolZwIM0fWfKCFX/m2TPFpULOzl6d3/N2xkzbYQ==",
                            PhoneNumber = "0325874156",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "NguyenVanHung@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("c6f46571-9f16-4c94-9f78-fb5c56b7caa9"),
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "",
                            Contact = "email, message, phone",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1998, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TranVanQuang@gmail.com",
                            EmailConfirmed = true,
                            FirstLogin = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            Name = "Trần Văn Quang",
                            NormalizedEmail = "TranVanQuang@gmail.com",
                            NormalizedUserName = "Trần Văn Quang",
                            PasswordHash = "AQAAAAEAACcQAAAAEFYE2hFYl2zZZoT/DifNiqFsaI3JasRXlQANrVFarCIg2o333xrvLhGzoLybhHK53A==",
                            PhoneNumber = "0325855156",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "TranVanQuang@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("babb8adf-190d-48ca-a9fe-a3b7c06fb58d"),
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "",
                            Contact = "email, message, phone",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2000, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PhamThiNhung@gmail.com",
                            EmailConfirmed = true,
                            FirstLogin = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            Name = "Phạm Thị Nhung",
                            NormalizedEmail = "PhamThiNhung@gmail.com",
                            NormalizedUserName = "Phạm Thị Nhung",
                            PasswordHash = "AQAAAAEAACcQAAAAEJTkj5FHu1uYOFTdslNFiDaI2i5cDzkFCGpZ7j4ejx4EOGZ2sIl/GZzbbRi3qqgGyA==",
                            PhoneNumber = "0326675156",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "PhamThiNhung@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("92f252eb-f35c-4d29-864a-5fbdcb82bd2e"),
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "",
                            Contact = "email, message, phone",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2002, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PhanThiThuy@gmail.com",
                            EmailConfirmed = true,
                            FirstLogin = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            Name = "Phan Thị Thủy",
                            NormalizedEmail = "PhanThiThuy@gmail.com",
                            NormalizedUserName = "Phan Thị Thủy",
                            PasswordHash = "AQAAAAEAACcQAAAAENz6VhHMrpnWq6G06HU5n2Ob3MTBjNt27hcJx8A9Gey+Krlu0XAONtXaDIf5PWv0qA==",
                            PhoneNumber = "0326675233",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "PhanThiThuy@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("e0181bf8-fc45-4122-97b0-1c4990a4983d"),
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "",
                            Contact = "email, message, phone",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "HoQuangPhu@gmail.com",
                            EmailConfirmed = true,
                            FirstLogin = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            Name = "Hồ Quang Phú",
                            NormalizedEmail = "HoQuangPhu@gmail.com",
                            NormalizedUserName = "Hồ Quang Phú",
                            PasswordHash = "AQAAAAEAACcQAAAAEKk19jRTtRNU9e7JGeTBBHmqTyyzVO8Qfpd5cwoyuXuN/q7sCNouVDZ7VlV6cByMXg==",
                            PhoneNumber = "0326676666",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "HoQuangPhu@gmail.com"
                        });
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.WatchList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasAlternateKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("WatchList");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(5381),
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(5629)
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 2L,
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(6373),
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(6403)
                        },
                        new
                        {
                            Id = 3L,
                            CourseId = 3L,
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(6427),
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(6428)
                        },
                        new
                        {
                            Id = 4L,
                            CourseId = 4L,
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(6430),
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(6431)
                        },
                        new
                        {
                            Id = 5L,
                            CourseId = 5L,
                            CreatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            CreatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(6432),
                            StudentId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            UpdatedDate = new DateTime(2021, 1, 14, 15, 54, 23, 581, DateTimeKind.Local).AddTicks(6433)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("ad0e4e6a-fee6-4ccf-91eb-5f357e04e467"),
                            UserId = new Guid("eafef07d-95fb-473d-b38e-57ea4a29968d")
                        },
                        new
                        {
                            RoleId = new Guid("09e89e3b-00dd-4580-a403-63fc3f91ab50"),
                            UserId = new Guid("e0181bf8-fc45-4122-97b0-1c4990a4983d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.Category", b =>
                {
                    b.HasOne("ACADEMY.Data.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ACADEMY.Data.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACADEMY.Data.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("Parent");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.Course", b =>
                {
                    b.HasOne("ACADEMY.Data.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ACADEMY.Data.Entities.User", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.CourseDetail", b =>
                {
                    b.HasOne("ACADEMY.Data.Entities.Course", "Course")
                        .WithMany("CourseDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.Feedback", b =>
                {
                    b.HasOne("ACADEMY.Data.Entities.Course", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACADEMY.Data.Entities.StudentCourse", "StudentCourse")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StudentId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentCourse");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.StudentCourse", b =>
                {
                    b.HasOne("ACADEMY.Data.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACADEMY.Data.Entities.User", "User")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.WatchList", b =>
                {
                    b.HasOne("ACADEMY.Data.Entities.Course", "Course")
                        .WithMany("WatchLists")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACADEMY.Data.Entities.User", "User")
                        .WithMany("WatchLists")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.Course", b =>
                {
                    b.Navigation("CourseDetails");

                    b.Navigation("Feedbacks");

                    b.Navigation("StudentCourses");

                    b.Navigation("WatchLists");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.StudentCourse", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("ACADEMY.Data.Entities.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("StudentCourses");

                    b.Navigation("WatchLists");
                });
#pragma warning restore 612, 618
        }
    }
}
